#!/usr/bin/python
# -*- coding: utf-8 -*-

# Highly divisible triangular number
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#    1: 1
#    3: 1,3
#    6: 1,2,3,6
#   10: 1,2,5,10
#   15: 1,3,5,15
#   21: 1,3,7,21
#   28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?


def calc_v1(n):
    '''
    ' 
    '''
    import integer
    i = 1
    while True:
        triangle_number = i * (i + 1) / 2
        factors = integer.factors(triangle_number)
        if len(factors) > n:
            return triangle_number
        i += 1


def calc_v2(n):
    '''
    ' the sequence of triangle number is:
    ' 1 * (1 + 1) / 2, 2 * (2 + 1) / 2, 3 * (3 + 1) / 2, 4 * (4 + 1) / 2, 5 * (5 + 1) / 2, ...,
    ' i * (i + 1) / 2, (i + 1) * (i + 2) / 2, ...
    '
    ' or in this form:
    ' 1 * 1, 1 * 3, 3 * 2, 2 * 5, 5 * 3, ...
    '
    ' or:
    ' (2 * 1 - 1) * 1, 1 * (2 * 1 + 1), (2 * 2 - 1) * 2, 2 * (2 * 2 + 1), (2 * 3 - 1) * 3, ...,
    ' (2 * j - 1) * j, j * (2 * j + 1), ...
    '
    '
    '''
    import integer
    i = 2
    flena, flenb, flenc = len(integer.factors(2 * i - 1)), len(integer.factors(i)), len(integer.factors(2 * i + 1))
    while True:
        if flena * flenb > n:
            return i * (2 * i - 1)
        elif flenb * flenc > n:
            return i * (2 * i + 1)
        
        i += 1
        flena, flenb, flenc = flenc, len(integer.factors(i)), len(integer.factors(2 * i + 1))

#!/usr/bin/pythom
# -*- coding: utf-8 -*-

# Even Fibonacci numbers
# Problem 2
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
#    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


def fib(n):
    a, b = 1, 1
    while b < n:
        yield b
        a, b = b, a + b


def calc_v1(n):
    return sum([x for x in fib(n) if x % 2 == 0])


def calc_v2(n):
    a, b, s = 1, 1, 0
    while (a + b) < n:
        s += (a + b)
        a, b = a + 2 * b, 2 * a + 3 * b
    return s


funcs = dict([(name, func) for name, func in locals().items() if name.startswith("calc")])


def main():
    import sys
    name, version, n = sys.argv
    #try:
    #    func = eval(version, {})
    #    print "version:", version, "result:",
    #    print func(int(n))
    #except NameError:
    #    print "undefined version of method:", version, "at", name
    if version in funcs:
        print "version:", version, "result:",
        print funcs[version](int(n))
    else:
        print "undefined version of method:", version, "at", name
        print "usage: python", name, "<" + "|".join(sorted(funcs.keys())) + ">", "<integer>"

if __name__ == "__main__":
    main()
